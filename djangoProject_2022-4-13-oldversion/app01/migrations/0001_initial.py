# Generated by Django 3.0.14 on 2022-04-05 01:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='afforestation_area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('造林总面积_千公顷_field', models.FloatField(blank=True, db_column='造林总面积(千公顷)', null=True)),
                ('当年人工造林面积_千公顷_field', models.FloatField(blank=True, db_column='当年人工造林面积(千公顷)', null=True)),
                ('当年飞机播种面积_千公顷_field', models.FloatField(blank=True, db_column='当年飞机播种面积(千公顷)', null=True)),
                ('封山育林_千公顷_field', models.FloatField(blank=True, db_column='封山育林(千公顷)', null=True)),
                ('用材林当年造林面积_千公顷_field', models.CharField(blank=True, db_column='用材林当年造林面积(千公顷)', max_length=1, null=True)),
                ('经济林当年造林面积_千公顷_field', models.CharField(blank=True, db_column='经济林当年造林面积(千公顷)', max_length=1, null=True)),
                ('防护林当年造林面积_千公顷_field', models.CharField(blank=True, db_column='防护林当年造林面积(千公顷)', max_length=1, null=True)),
                ('薪炭林当年造林面积_千公顷_field', models.CharField(blank=True, db_column='薪炭林当年造林面积(千公顷)', max_length=1, null=True)),
                ('特种用林当年造林面积_千公顷_field', models.CharField(blank=True, db_column='特种用林当年造林面积(千公顷)', max_length=1, null=True)),
            ],
            options={
                'db_table': '造林面积_csv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='forest_resources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('林业用地面积_万公顷_field', models.FloatField(blank=True, db_column='林业用地面积(万公顷)', null=True)),
                ('森林面积_万公顷_field', models.FloatField(blank=True, db_column='森林面积(万公顷)', null=True)),
                ('人工林面积_万公顷_field', models.FloatField(blank=True, db_column='人工林面积(万公顷)', null=True)),
                ('森林覆盖率_field', models.FloatField(blank=True, db_column='森林覆盖率(百分之)', null=True)),
                ('活立木总蓄积量_亿立方米_field', models.FloatField(blank=True, db_column='活立木总蓄积量(亿立方米)', null=True)),
                ('森林蓄积量_亿立方米_field', models.FloatField(blank=True, db_column='森林蓄积量(亿立方米)', null=True)),
            ],
            options={
                'db_table': '森林资源_csv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='freight_transport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('货运量_万吨_field', models.FloatField(blank=True, db_column='货运量(万吨)', null=True)),
                ('铁路货运量_万吨_field', models.FloatField(blank=True, db_column='铁路货运量(万吨)', null=True)),
                ('国家铁路货运量_万吨_field', models.CharField(blank=True, db_column='国家铁路货运量(万吨)', max_length=1, null=True)),
                ('地方铁路货运量_万吨_field', models.CharField(blank=True, db_column='地方铁路货运量(万吨)', max_length=1, null=True)),
                ('合资铁路货运量_万吨_field', models.CharField(blank=True, db_column='合资铁路货运量(万吨)', max_length=1, null=True)),
                ('公路货运量_万吨_field', models.FloatField(blank=True, db_column='公路货运量(万吨)', null=True)),
                ('水运货运量_万吨_field', models.FloatField(blank=True, db_column='水运货运量(万吨)', null=True)),
            ],
            options={
                'db_table': '货运量_csv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Main_energy_ferrous_metal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('石油储量_万吨_field', models.FloatField(blank=True, db_column='石油储量(万吨)', null=True)),
                ('天然气储量_亿立方米_field', models.FloatField(blank=True, db_column='天然气储量(亿立方米)', null=True)),
                ('煤炭储量_亿吨_field', models.FloatField(blank=True, db_column='煤炭储量(亿吨)', null=True)),
                ('铁矿储量_亿吨_field', models.FloatField(blank=True, db_column='铁矿储量(亿吨)', null=True)),
                ('锰矿储量_万吨_field', models.FloatField(blank=True, db_column='锰矿储量(万吨)', null=True)),
                ('铬矿储量_万吨_field', models.FloatField(blank=True, db_column='铬矿储量(万吨)', null=True)),
                ('钒矿储量_万吨_field', models.FloatField(blank=True, db_column='钒矿储量(万吨)', null=True)),
                ('原生钛铁矿储量_万吨_field', models.FloatField(blank=True, db_column='原生钛铁矿储量(万吨)', null=True)),
            ],
            options={
                'db_table': '主要能源_黑色金属矿产基础储量_csv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='non_ferrous_metals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('铜矿储量_万吨_field', models.FloatField(blank=True, db_column='铜矿储量(万吨)', null=True)),
                ('铅矿储量_万吨_field', models.FloatField(blank=True, db_column='铅矿储量(万吨)', null=True)),
                ('锌矿储量_万吨_field', models.FloatField(blank=True, db_column='锌矿储量(万吨)', null=True)),
                ('铝土矿储量_万吨_field', models.FloatField(blank=True, db_column='铝土矿储量(万吨)', null=True)),
                ('菱镁矿储量_万吨_field', models.FloatField(blank=True, db_column='菱镁矿储量(万吨)', null=True)),
                ('硫铁矿储量_万吨_field', models.FloatField(blank=True, db_column='硫铁矿储量(万吨)', null=True)),
                ('磷矿储量_亿吨_field', models.FloatField(blank=True, db_column='磷矿储量(亿吨)', null=True)),
                ('高岭土储量_万吨_field', models.FloatField(blank=True, db_column='高岭土储量(万吨)', null=True)),
            ],
            options={
                'db_table': '主要有色金属_非金属矿产基础储量_csv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='passenger_volume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('客运量_万人_field', models.FloatField(blank=True, db_column='客运量(万人)', null=True)),
                ('铁路客运量_万人_field', models.FloatField(blank=True, db_column='铁路客运量(万人)', null=True)),
                ('国家铁路客运量_万人_field', models.CharField(blank=True, db_column='国家铁路客运量(万人)', max_length=1, null=True)),
                ('地方铁路客运量_万人_field', models.CharField(blank=True, db_column='地方铁路客运量(万人)', max_length=1, null=True)),
                ('合资铁路客运量_万人_field', models.CharField(blank=True, db_column='合资铁路客运量(万人)', max_length=1, null=True)),
                ('公路客运量_万人_field', models.FloatField(blank=True, db_column='公路客运量(万人)', null=True)),
                ('水运客运量_万人_field', models.FloatField(blank=True, db_column='水运客运量(万人)', null=True)),
            ],
            options={
                'db_table': '客运量_csv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='transportation_route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('铁路营业里程_万公里_field', models.FloatField(blank=True, db_column='铁路营业里程(万公里)', null=True)),
                ('内河航道里程_万公里_field', models.FloatField(blank=True, db_column='内河航道里程(万公里)', null=True)),
                ('公路里程_万公里_field', models.FloatField(blank=True, db_column='公路里程(万公里)', null=True)),
                ('等级公路里程_万公里_field', models.FloatField(blank=True, db_column='等级公路里程(万公里)', null=True)),
                ('高速等级公路里程_万公里_field', models.FloatField(blank=True, db_column='高速等级公路里程(万公里)', null=True)),
                ('一级等级公路里程_万公里_field', models.FloatField(blank=True, db_column='一级等级公路里程(万公里)', null=True)),
                ('二级等级公路里程_万公里_field', models.FloatField(blank=True, db_column='二级等级公路里程(万公里)', null=True)),
                ('等外公路公路里程_万公里_field', models.FloatField(blank=True, db_column='等外公路公路里程(万公里)', null=True)),
            ],
            options={
                'db_table': '运输线路长度_csv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='water_resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('水资源总量_亿立方米_field', models.FloatField(blank=True, db_column='水资源总量(亿立方米)', null=True)),
                ('地表水资源量_亿立方米_field', models.FloatField(blank=True, db_column='地表水资源量(亿立方米)', null=True)),
                ('地下水资源量_亿立方米_field', models.FloatField(blank=True, db_column='地下水资源量(亿立方米)', null=True)),
                ('地表水与地下水资源重复量_亿立方米_field', models.FloatField(blank=True, db_column='地表水与地下水资源重复量(亿立方米)', null=True)),
                ('人均水资源量_立方米_人_field', models.FloatField(blank=True, db_column='人均水资源量(立方米/人)', null=True)),
            ],
            options={
                'db_table': '水资源_csv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='water_supply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('省份编码', models.IntegerField(blank=True, null=True)),
                ('省份', models.CharField(blank=True, max_length=8, null=True)),
                ('年份', models.IntegerField(blank=True, null=True)),
                ('供水总量_亿立方米_field', models.FloatField(blank=True, db_column='供水总量(亿立方米)', null=True)),
                ('地表水供水总量_亿立方米_field', models.FloatField(blank=True, db_column='地表水供水总量(亿立方米)', null=True)),
                ('地下水供水总量_亿立方米_field', models.FloatField(blank=True, db_column='地下水供水总量(亿立方米)', null=True)),
                ('其他供水总量_亿立方米_field', models.FloatField(blank=True, db_column='其他供水总量(亿立方米)', null=True)),
                ('用水总量_亿立方米_field', models.FloatField(blank=True, db_column='用水总量(亿立方米)', null=True)),
                ('农业用水总量_亿立方米_field', models.FloatField(blank=True, db_column='农业用水总量(亿立方米)', null=True)),
                ('工业用水总量_亿立方米_field', models.FloatField(blank=True, db_column='工业用水总量(亿立方米)', null=True)),
                ('生活用水总量_亿立方米_field', models.FloatField(blank=True, db_column='生活用水总量(亿立方米)', null=True)),
                ('生态用水总量_亿立方米_field', models.FloatField(blank=True, db_column='生态用水总量(亿立方米)', null=True)),
                ('人均用水量_立方米_人_field', models.FloatField(blank=True, db_column='人均用水量(立方米/人)', null=True)),
            ],
            options={
                'db_table': '供水用水情况_csv',
                'managed': False,
            },
        ),
    ]
